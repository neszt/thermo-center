# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from receiver import api_pb2 as receiver_dot_api__pb2


class ReceiverStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ConfigureSensor = channel.unary_unary(
        '/receiver.Receiver/ConfigureSensor',
        request_serializer=receiver_dot_api__pb2.ConfigureRequest.SerializeToString,
        response_deserializer=receiver_dot_api__pb2.ConfigureResponse.FromString,
        )


class ReceiverServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ConfigureSensor(self, request, context):
    """Request a receiver to enter configuration mode
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ReceiverServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ConfigureSensor': grpc.unary_unary_rpc_method_handler(
          servicer.ConfigureSensor,
          request_deserializer=receiver_dot_api__pb2.ConfigureRequest.FromString,
          response_serializer=receiver_dot_api__pb2.ConfigureResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'receiver.Receiver', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
