// Code generated by protoc-gen-go. DO NOT EDIT.
// source: receiver/api.proto

package receiver

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	configurator "github.com/rkojedzinszky/thermo-center/configurator"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HandleResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HandleResponse) Reset()         { *m = HandleResponse{} }
func (m *HandleResponse) String() string { return proto.CompactTextString(m) }
func (*HandleResponse) ProtoMessage()    {}
func (*HandleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_556300b44c2f002e, []int{0}
}

func (m *HandleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HandleResponse.Unmarshal(m, b)
}
func (m *HandleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HandleResponse.Marshal(b, m, deterministic)
}
func (m *HandleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandleResponse.Merge(m, src)
}
func (m *HandleResponse) XXX_Size() int {
	return xxx_messageInfo_HandleResponse.Size(m)
}
func (m *HandleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HandleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HandleResponse proto.InternalMessageInfo

func (m *HandleResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*HandleResponse)(nil), "receiver.HandleResponse")
}

func init() { proto.RegisterFile("receiver/api.proto", fileDescriptor_556300b44c2f002e) }

var fileDescriptor_556300b44c2f002e = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8e, 0xbf, 0xcf, 0x82, 0x30,
	0x10, 0x40, 0x3f, 0x96, 0x4f, 0xd2, 0xc1, 0xa1, 0x83, 0x21, 0x4c, 0x86, 0xc9, 0x98, 0xd8, 0x46,
	0x5d, 0x9d, 0x9c, 0x98, 0x89, 0x93, 0x5b, 0x29, 0x27, 0x54, 0xa4, 0x47, 0x7a, 0xc5, 0x44, 0xfe,
	0x7a, 0xe3, 0x8f, 0x26, 0x38, 0xde, 0xcb, 0xdd, 0x7b, 0xc7, 0xb8, 0x03, 0x0d, 0xe6, 0x0e, 0x4e,
	0xaa, 0xde, 0x88, 0xde, 0xa1, 0x47, 0x1e, 0x07, 0x96, 0x2e, 0x34, 0xda, 0x8b, 0xa9, 0x07, 0xa7,
	0x3c, 0x4e, 0x36, 0xb2, 0x35, 0x9b, 0xe7, 0xca, 0x56, 0x37, 0x28, 0x80, 0x7a, 0xb4, 0x04, 0x3c,
	0x61, 0x33, 0x1a, 0xb4, 0x06, 0xa2, 0x24, 0x5a, 0x46, 0xab, 0xb8, 0x08, 0xe3, 0x2e, 0x67, 0x71,
	0xf1, 0xf5, 0xf1, 0x03, 0x63, 0x9f, 0xbb, 0x93, 0xa2, 0x96, 0x73, 0x31, 0xd5, 0x8b, 0x17, 0x4b,
	0x13, 0x11, 0xe2, 0xe2, 0xb7, 0x90, 0xfd, 0x1d, 0xb7, 0x67, 0x59, 0x1b, 0xdf, 0x0c, 0xa5, 0xd0,
	0xd8, 0x49, 0xd7, 0xe2, 0x15, 0xaa, 0xd1, 0x58, 0x1a, 0xdb, 0x87, 0xf4, 0x0d, 0xb8, 0x0e, 0x37,
	0x1a, 0xac, 0x07, 0x27, 0x83, 0xa3, 0xfc, 0x7f, 0xff, 0xbb, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff,
	0xf0, 0x17, 0xaa, 0xc7, 0xe7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReceiverClient is the client API for Receiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReceiverClient interface {
	// Request to handle a sensor configuration task
	HandleTask(ctx context.Context, in *configurator.Task, opts ...grpc.CallOption) (*HandleResponse, error)
}

type receiverClient struct {
	cc *grpc.ClientConn
}

func NewReceiverClient(cc *grpc.ClientConn) ReceiverClient {
	return &receiverClient{cc}
}

func (c *receiverClient) HandleTask(ctx context.Context, in *configurator.Task, opts ...grpc.CallOption) (*HandleResponse, error) {
	out := new(HandleResponse)
	err := c.cc.Invoke(ctx, "/receiver.Receiver/HandleTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiverServer is the server API for Receiver service.
type ReceiverServer interface {
	// Request to handle a sensor configuration task
	HandleTask(context.Context, *configurator.Task) (*HandleResponse, error)
}

// UnimplementedReceiverServer can be embedded to have forward compatible implementations.
type UnimplementedReceiverServer struct {
}

func (*UnimplementedReceiverServer) HandleTask(ctx context.Context, req *configurator.Task) (*HandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleTask not implemented")
}

func RegisterReceiverServer(s *grpc.Server, srv ReceiverServer) {
	s.RegisterService(&_Receiver_serviceDesc, srv)
}

func _Receiver_HandleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(configurator.Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServer).HandleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/receiver.Receiver/HandleTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServer).HandleTask(ctx, req.(*configurator.Task))
	}
	return interceptor(ctx, in, info, handler)
}

var _Receiver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "receiver.Receiver",
	HandlerType: (*ReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleTask",
			Handler:    _Receiver_HandleTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "receiver/api.proto",
}
